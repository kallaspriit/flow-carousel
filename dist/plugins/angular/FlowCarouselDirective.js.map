{"version":3,"file":"FlowCarouselDirective.js","sources":["../../../plugins/angular/FlowCarouselDirective.js"],"names":["angular","createAngularRenderer","FlowCarousel","window","AngularRenderer","scope","template","itemName","AbstractRenderer","call","this","_scope","_template","_itemName","prototype","Object","create","renderItem","config","index","data","link","element","deferred","Deferred","$new","$outer","$parent","angularCompile","resolve","promise","renderPlaceholder","$","FlowCarouselDirective","_carousel","compile","$element","attrs","_extractTemplate","empty","$scope","$attrs","key","dataSource","Error","item","length","ArrayDataSource","AbstractDataSource","renderer","addListener","Event","LOADED_ITEMS","_angularApply","bind","init","$watch","newItemCount","lastItemCount","console","log","redraw","html","replace","fn","phase","$root","$$phase","$apply","module","directive","restrict","flowCarouselDirective","run","$compile"],"mappings":"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","sourcesContent":["(function(angular) {\r\n\t'use strict';\r\n\r\n\t// the angular compile service set in the module.run() callback\r\n\tvar angularCompile = null;\r\n\r\n\t// Creates and returns the AngularRender class. it's not defined at once because the window.FlowCarousel may not be\r\n\t// available before the directive link method runs.\r\n\tfunction createAngularRenderer() {\r\n\t\tvar FlowCarousel = window.FlowCarousel;\r\n\r\n\t\t/**\r\n\t\t * The custom renderer for AngularJS that uses angular to render items.\r\n\t\t *\r\n\t\t * @class AngularRenderer\r\n\t\t * @extends AbstractRenderer\r\n\t\t * @param {angular.Scope} scope The angular scope\r\n\t\t * @param {string} template Item template\r\n\t\t * @param {string} itemName The item name to assign data to in the scope\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tvar AngularRenderer = function(scope, template, itemName) {\r\n\t\t\tFlowCarousel.AbstractRenderer.call(this);\r\n\r\n\t\t\tthis._scope = scope;\r\n\t\t\tthis._template = template;\r\n\t\t\tthis._itemName = itemName;\r\n\t\t};\r\n\r\n\t\tAngularRenderer.prototype = Object.create(FlowCarousel.AbstractRenderer.prototype);\r\n\r\n\t\t/**\r\n\t\t * Renders a carousel item.\r\n\t\t *\r\n\t\t * The data can be either a object of key-value pairs or an existing dom element to modify.\r\n\t\t *\r\n\t\t * Rendering an item can be asynchronous so a promise is returned.\r\n\t\t *\r\n\t\t * @method renderItem\r\n\t\t * @param {Config} config Carousel configuration\r\n\t\t * @param {number} index Item position index\r\n\t\t * @param {object|DOMElement} data Item data object or existing dom element\r\n\t\t * @return {Deferred.Promise}\r\n\t\t */\r\n\t\tAngularRenderer.prototype.renderItem = function(config, index, data) {\r\n\t\t\tvar deferred = new FlowCarousel.Deferred(),\r\n\t\t\t\tscope = this._scope.$new(),\r\n\t\t\t\tlink,\r\n\t\t\t\telement;\r\n\r\n\t\t\t// provide the scope with item data\r\n\t\t\tscope[this._itemName] = data;\r\n\r\n\t\t\t// reference the parent-parent scope as \"$outer\"\r\n\t\t\tscope.$outer = scope.$parent.$parent;\r\n\r\n\t\t\t// use the angular compile service to get the link method\r\n\t\t\tlink = angularCompile(this._template);\r\n\r\n\t\t\t// link the template to the scope and we get an element\r\n\t\t\telement = link(scope);\r\n\r\n\t\t\t// provide the element synchronously\r\n\t\t\tdeferred.resolve(element);\r\n\r\n\t\t\treturn deferred.promise();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Renders a loading item placeholder.\r\n\t\t *\r\n\t\t * By default returns a simple div with the\r\n\t\t * {{#crossLink \"Config/cssClasses/placeholder:property\"}}{{/crossLink}} class.\r\n\t\t *\r\n\t\t * You may override this in your custom renderer.\r\n\t\t *\r\n\t\t * @method renderPlaceholder\r\n\t\t * @param {Config} config Carousel configuration\r\n\t\t * @param {number} index Item position index\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\tAngularRenderer.prototype.renderPlaceholder = function(config, index) {\r\n\t\t\treturn $('<div>loading #' + index + '</div>')[0];\r\n\t\t};\r\n\r\n\t\treturn AngularRenderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Angular FlowCarousel directive.\r\n\t *\r\n\t * Use it either as an argument:\r\n\t * <div flow-carousel config=\"config\">...</div>\r\n\t *\r\n\t * Or a tag:\r\n\t * <flow-carousel config=\"config\">...</flow-carousel>\r\n\t *\r\n\t * To use it in your application, include the \"FlowCarousel\" module dependency:\r\n\t *\r\n\t * var angularApp = angular.module('CarouselApp', ['FlowCarousel']) ...\r\n\t *\r\n\t * https://github.com/kallaspriit/flow-carousel\r\n\t *\r\n\t * @class FlowCarouselDirective\r\n\t * @constructor\r\n\t * @author Priit Kallas <priit@stagnationlab.com>\r\n\t * @copyright Stagnation Lab\r\n\t * @licence MIT\r\n\t */\r\n\tfunction FlowCarouselDirective() {\r\n\t\tthis._carousel = null;\r\n\t\tthis._scope = null;\r\n\t\tthis._itemName = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Directive compiler.\r\n\t *\r\n\t * @method compile\r\n\t * @param {DOMElement} $element The element to link to\r\n\t * @param {object} attrs Attributes\r\n\t */\r\n\tFlowCarouselDirective.prototype.compile = function($element, attrs) {\r\n\t\t// if the data attribute is set then we're using custom data source and renderer so extract the template and\r\n\t\t// clear the wrap contents\r\n\t\tif (typeof attrs.data !== 'undefined') {\r\n\t\t\tthis._template = this._extractTemplate($element);\r\n\r\n\t\t\t$element.empty();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Directive linker.\r\n\t *\r\n\t * Throws error if FlowCarousel class is not present.\r\n\t *\r\n\t * @method link\r\n\t * @param {angular.Scope} $scope Angular scope\r\n\t * @param {DOMElement} $element The element to link to\r\n\t * @param {object} $attrs Attributes\r\n\t */\r\n\tFlowCarouselDirective.prototype.link = function($scope, $element, $attrs) {\r\n\t\tvar FlowCarousel = window.FlowCarousel,\r\n\t\t\tconfig = {\r\n\t\t\t\tdataSource: null\r\n\t\t\t},\r\n\t\t\tkey;\r\n\r\n\t\t// we're expecting the FlowCarousel class to have been loaded before the linking procedure runs\r\n\t\tif (typeof FlowCarousel !== 'function') {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'FlowCarousel is not loaded or registered under window, ' +\r\n\t\t\t\t'please add \"window.FlowCarousel = FlowCarousel;\"'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// store the reference to scope\r\n\t\tthis._scope = $scope;\r\n\r\n\t\t// store the item name to assign data under in the created item scopes\r\n\t\tthis._itemName = $scope.item || 'item';\r\n\r\n\t\t// extend the configuration with user config if provided\r\n\t\tif (typeof $scope.config === 'object') {\r\n\t\t\tfor (key in $scope.config) {\r\n\t\t\t\tconfig[key] = $scope.config[key];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// check whether basic array custom data has been provided\r\n\t\tif (typeof $scope.data === 'object' && typeof $scope.data.length === 'number') {\r\n\t\t\tconfig.dataSource = new FlowCarousel.ArrayDataSource($scope.data);\r\n\t\t} else if ($scope.data instanceof FlowCarousel.AbstractDataSource) {\r\n\t\t\t// a custom AbstractDataSource implementation is provided\r\n\t\t\tconfig.dataSource = $scope.data;\r\n\t\t}\r\n\r\n\t\t// if we're using a custom data source then we need custom angular renderer as well\r\n\t\tif (config.dataSource !== null) {\r\n\t\t\tvar AngularRenderer = createAngularRenderer();\r\n\r\n\t\t\tconfig.renderer = new AngularRenderer($scope, this._template, this._itemName);\r\n\t\t}\r\n\r\n\t\t// create carousel instance\r\n\t\tthis._carousel = new FlowCarousel();\r\n\r\n\t\t// re-validate the scope after loading and rendering a new set of items\r\n\t\tthis._carousel.addListener(FlowCarousel.Event.LOADED_ITEMS, function() {\r\n\t\t\tthis._angularApply();\r\n\t\t}.bind(this));\r\n\r\n\t\t// initiate the carousel component\r\n\t\tthis._carousel.init($element, config);\r\n\r\n\t\t// watch for number of items change\r\n\t\tif (typeof $attrs.data === 'string') {\r\n\t\t\t/*if ($attrs.data.indexOf('(') === -1) {\r\n\t\t\t\t// watching a normal variable, expecting an array\r\n\t\t\t\tthis._scope.$watch($attrs.data + '.length', function (newItemCount, lastItemCount) {\r\n\t\t\t\t\tif (newItemCount === lastItemCount) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._carousel.redraw();\r\n\t\t\t\t}.bind(this));\r\n\t\t\t} else {*/\r\n\t\t\t\tthis._scope.$watch(\r\n\t\t\t\t\t'$parent.' + $attrs.data + '.length',\r\n\t\t\t\t\tfunction (newItemCount, lastItemCount) {\r\n\t\t\t\t\t\tif (newItemCount === lastItemCount) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconsole.log('change', newItemCount, lastItemCount);\r\n\r\n\t\t\t\t\t\tthis._carousel.redraw();\r\n\t\t\t\t\t}.bind(this)\r\n\t\t\t\t);\r\n\t\t\t//}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Extract the AngularJS template from given carousel element.\r\n\t *\r\n\t * @method _extractTemplate\r\n\t * @param {DOMElement} $element Carousel element\r\n\t * @return {string}\r\n\t * @private\r\n\t */\r\n\tFlowCarouselDirective.prototype._extractTemplate = function($element) {\r\n\t\t// use the trimmed HTML content of the element as template\r\n\t\treturn $element.html().replace(/^\\s+|\\s+$/g, '');\r\n\t};\r\n\r\n\t/**\r\n\t * Performs safe angular scope $apply.\r\n\t *\r\n\t * @method _angularApply\r\n\t * @private\r\n\t */\r\n\tFlowCarouselDirective.prototype._angularApply = function(fn) {\r\n\t\tvar phase = this._scope.$root.$$phase;\r\n\r\n\t\tif (phase == '$apply' || phase == '$digest') {\r\n\t\t\tif (typeof fn === 'function') {\r\n\t\t\t\tfn();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._scope.$apply(fn);\r\n\t\t}\r\n\t};\r\n\r\n\t// define the FlowCarousel module, this should be included as dependency to your main application module\r\n\tangular.module('FlowCarousel', [])\r\n\t\t.directive('flowCarousel', function () {\r\n\t\t\treturn {\r\n\t\t\t\trestrict: 'EA', // element or an attribute\r\n\t\t\t\tscope: {\r\n\t\t\t\t\tdata: '=', // the data to render, leave empty if items are already in the DOM\r\n\t\t\t\t\tconfig: '=', // optional config passed to the carousel init method\r\n\t\t\t\t\titem: '@' // the name of the scope variable that each item data is set to\r\n\t\t\t\t},\r\n\t\t\t\tcompile: function ($element, attrs) {\r\n\t\t\t\t\tvar flowCarouselDirective = new FlowCarouselDirective();\r\n\r\n\t\t\t\t\t// run the compile method\r\n\t\t\t\t\tflowCarouselDirective.compile($element, attrs);\r\n\r\n\t\t\t\t\t// return the link method\r\n\t\t\t\t\treturn function ($scope, $element, $attrs) {\r\n\t\t\t\t\t\tflowCarouselDirective.link($scope, $element, $attrs);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t})\r\n\t\t.run(['$compile', function($compile) {\r\n\t\t\t// the AngularRenderer need the compile service\r\n\t\t\tangularCompile = $compile;\r\n\t\t}]);\r\n\r\n\treturn FlowCarouselDirective;\r\n})(window.angular);"]}