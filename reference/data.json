{
    "project": {
        "name": "FlowCarousel",
        "description": "",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "src\\AbstractAnimator.js": {
            "name": "src\\AbstractAnimator.js",
            "modules": {},
            "classes": {
                "AbstractAnimator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\AbstractDataSource.js": {
            "name": "src\\AbstractDataSource.js",
            "modules": {},
            "classes": {
                "AbstractDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\AbstractRenderer.js": {
            "name": "src\\AbstractRenderer.js",
            "modules": {},
            "classes": {
                "AbstractRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\ArrayDataSource.js": {
            "name": "src\\ArrayDataSource.js",
            "modules": {},
            "classes": {
                "ArrayDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Config.js": {
            "name": "src\\Config.js",
            "modules": {},
            "classes": {
                "Config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\DefaultAnimator.js": {
            "name": "src\\DefaultAnimator.js",
            "modules": {},
            "classes": {
                "DefaultAnimator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Deferred.js": {
            "name": "src\\Deferred.js",
            "modules": {},
            "classes": {
                "Deferred": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\FlowCarousel.js": {
            "name": "src\\FlowCarousel.js",
            "modules": {},
            "classes": {
                "FlowCarousel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\HtmlDataSource.js": {
            "name": "src\\HtmlDataSource.js",
            "modules": {},
            "classes": {
                "HtmlDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\HtmlRenderer.js": {
            "name": "src\\HtmlRenderer.js",
            "modules": {},
            "classes": {
                "HtmlRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Util.js": {
            "name": "src\\Util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jquery.js": {
            "name": "src\\jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AbstractAnimator": {
            "name": "AbstractAnimator",
            "shortname": "AbstractAnimator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AbstractAnimator.js",
            "line": 5,
            "description": "Animator interface.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "carousel",
                    "description": "The carousel component",
                    "type": "FlowCarousel"
                }
            ]
        },
        "AbstractDataSource": {
            "name": "AbstractDataSource",
            "shortname": "AbstractDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AbstractDataSource.js",
            "line": 5,
            "description": "Data source interface.",
            "is_constructor": 1
        },
        "AbstractRenderer": {
            "name": "AbstractRenderer",
            "shortname": "AbstractRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AbstractRenderer.js",
            "line": 6,
            "description": "Renderer interface.",
            "is_constructor": 1
        },
        "ArrayDataSource": {
            "name": "ArrayDataSource",
            "shortname": "ArrayDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\ArrayDataSource.js",
            "line": 7,
            "description": "Data source interface.",
            "extends": "AbstractDataSource",
            "is_constructor": 1
        },
        "Config": {
            "name": "Config",
            "shortname": "Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Config.js",
            "line": 5,
            "description": "Provides configuration.",
            "is_constructor": 1
        },
        "DefaultAnimator": {
            "name": "DefaultAnimator",
            "shortname": "DefaultAnimator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\DefaultAnimator.js",
            "line": 8,
            "description": "Data source interface.",
            "extends": "AbstractAnimator",
            "is_constructor": 1,
            "params": [
                {
                    "name": "carousel",
                    "description": "The carousel component",
                    "type": "FlowCarousel"
                }
            ]
        },
        "Deferred": {
            "name": "Deferred",
            "shortname": "Deferred",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Deferred.js",
            "line": 6,
            "description": "Provides utility functionality.\n\nUses the jQuery deferred implementation.",
            "is_constructor": 1
        },
        "FlowCarousel": {
            "name": "FlowCarousel",
            "shortname": "FlowCarousel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\FlowCarousel.js",
            "line": 28,
            "description": "FlowCarousel main class.\n\nResponsive paginated high-performance HTML5 carousel with AngularJS support.\n\nCopyright Stagnation Lab\nReleased under the MIT license\nhttps://github.com/kallaspriit/flow-carousel",
            "is_constructor": 1
        },
        "HtmlDataSource": {
            "name": "HtmlDataSource",
            "shortname": "HtmlDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\HtmlDataSource.js",
            "line": 8,
            "description": "Data source interface.",
            "extends": "AbstractDataSource",
            "is_constructor": 1
        },
        "HtmlRenderer": {
            "name": "HtmlRenderer",
            "shortname": "HtmlRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\HtmlRenderer.js",
            "line": 7,
            "description": "The default renderer for already existing HTML elements.",
            "extends": "AbstractRenderer",
            "is_constructor": 1
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Util.js",
            "line": 5,
            "description": "Provides utility functionality.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src\\AbstractAnimator.js",
            "line": 16,
            "description": "Animates the carousel to given item index position.",
            "itemtype": "method",
            "name": "animateToItem",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Index of the item",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "AbstractAnimator"
        },
        {
            "file": "src\\AbstractDataSource.js",
            "line": 13,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "AbstractDataSource"
        },
        {
            "file": "src\\AbstractDataSource.js",
            "line": 23,
            "description": "Fetches given range of items from the dataset.\n\nThis operation can be asynchronous and thus returns a promise that will be resolved once the data becomes\navailable or rejected when an error occurs.\n\nBy default the range is the entire dataset.\n\nThrows error if invalid range is requested.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "length"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "AbstractDataSource"
        },
        {
            "file": "src\\AbstractRenderer.js",
            "line": 14,
            "description": "Renders a carousel item.\n\nThe data can be either a object of key-value pairs or an existing dom element to modify.\n\nRendering an item can be asynchronous so a promise is returned.",
            "itemtype": "method",
            "name": "renderItem",
            "params": [
                {
                    "name": "config",
                    "description": "Carousel configuration",
                    "type": "Config"
                },
                {
                    "name": "index",
                    "description": "Item position index",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Item data object or existing dom element",
                    "type": "Object|DOMElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "AbstractRenderer"
        },
        {
            "file": "src\\AbstractRenderer.js",
            "line": 33,
            "description": "Destroys a carousel item.\n\nBy default just removes the element using jQuery, but inheriting classes may choose to do something fancier.",
            "itemtype": "method",
            "name": "destroyItem",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element to destroy",
                    "type": "DOMElement"
                }
            ],
            "class": "AbstractRenderer"
        },
        {
            "file": "src\\ArrayDataSource.js",
            "line": 22,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "ArrayDataSource"
        },
        {
            "file": "src\\ArrayDataSource.js",
            "line": 32,
            "description": "Fetches given range of items from the dataset.\n\nThis operation can be asynchronous and thus returns a promise that will be resolved once the data becomes\navailable or rejected when an error occurs.\n\nBy default the range is the entire dataset.\n\nThrows error if invalid range is requested.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "length"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "ArrayDataSource"
        },
        {
            "file": "src\\Config.js",
            "line": 13,
            "description": "Carousel orientation to use.\n\nOne of {{#crossLink \"Config/Orientation:property\"}}{{/crossLink}}.\n\nDefaults to horizontal.",
            "itemtype": "property",
            "name": "orientation",
            "type": "{Config/Orientation:property}",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 25,
            "description": "Number of items to render side-by-side when not using responsive layout.\n\nThis parameter is ignored when using responsive layout strategy.",
            "itemtype": "property",
            "name": "itemsPerPage",
            "type": "number",
            "default": "5",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 36,
            "description": "Item margin to use.",
            "itemtype": "property",
            "name": "margin",
            "type": "{number}",
            "default": "0",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 45,
            "description": "Should responsive layout be used by default.",
            "itemtype": "property",
            "name": "useResponsiveLayout",
            "type": "boolean",
            "default": "true",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 54,
            "description": "List of default responsive layout breakpoint.\n\nThe list should be ordered from the smallest size to the largest.",
            "itemtype": "property",
            "name": "responsiveBreakpoints",
            "type": "array",
            "default": "true",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 80,
            "description": "The interval at which to check for carousel wrap size changes so responsive layout could be applied.\n\nValue is in milliseconds.",
            "itemtype": "property",
            "name": "responsiveLayoutListenerInterval",
            "type": "{number}",
            "default": "100",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 91,
            "description": "The css classes prefix to use.",
            "itemtype": "property",
            "name": "cssPrefix",
            "type": "{string}",
            "default": "'flow-carousel-'",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 100,
            "description": "CSS class names to use.",
            "itemtype": "property",
            "name": "cssClasses",
            "type": "{object}",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 117,
            "description": "The carousel instance is registered as the main wrap data with the dataTarget name.",
            "itemtype": "property",
            "name": "dataTarget",
            "type": "{string}",
            "default": "'flow-carousel'",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 126,
            "description": "Optional custom data source to use.\n\nAs a special case, a simple array can be provided as data source which is converted to use\n{{#crossLink \"ArrayDataSource\"}}{{/crossLink}} implementation.\n\nIf none is provided then the {{#crossLink \"HtmlDataSource\"}}{{/crossLink}} is used.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{AbstractRenderer|array}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 140,
            "description": "Optional custom renderer to use.\n\nIf none is provided then the {{#crossLink \"HtmlRenderer\"}}{{/crossLink}} is used.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{AbstractRenderer}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 151,
            "description": "Optional custom animator to use.\n\nShould be an instance of {{#crossLink \"AbstractAnimator\"}}{{/crossLink}}.\n\nIf none is provided then the {{#crossLink \"DefaultAnimator\"}}{{/crossLink}} is used.",
            "itemtype": "property",
            "name": "animator",
            "type": "{AbstractAnimator}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 164,
            "description": "Returns the range of items that should be rendered given current item index and items per page.\n\nBy default returns one page before the current page and one after but one may choose to override it.",
            "itemtype": "method",
            "name": "getRenderRange",
            "params": [
                {
                    "name": "currentItemIndex",
                    "description": "Currently scrolled position index",
                    "type": "Number"
                },
                {
                    "name": "itemsPerPage",
                    "description": "How many items are shown on a page",
                    "type": "Number"
                },
                {
                    "name": "itemCount",
                    "description": "How many items there are in total",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Render range with start and end keys",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 184,
            "description": "Enumeration of possible carousel orientations.",
            "itemtype": "property",
            "name": "Orientation",
            "type": "{object}",
            "static": 1,
            "class": "Config",
            "subprops": [
                {
                    "name": "HORIZONTAL='horizontal'",
                    "description": "Horizontal orientation",
                    "type": "String"
                },
                {
                    "name": "VERTIAL='vertical'",
                    "description": "Vertical orientation",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\Config.js",
            "line": 198,
            "description": "Extends the base default configuration properties with user-defined values.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "userConfig",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 219,
            "description": "Returns the number of items to render side-by-side based on the wrap size and\n{{#crossLink \"Config/responsiveBreakpoints:property\"}}{{/crossLink}} setting.",
            "itemtype": "method",
            "name": "getItemsPerPage",
            "params": [
                {
                    "name": "wrapSize",
                    "description": "Wrap size to base the calculation on",
                    "type": "Number"
                }
            ],
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 245,
            "description": "Returns class name to use by type.\n\nThe class name is constructed by combining the value of {{#crossLink \"Config/cssPrefix:property\"}}{{/crossLink}}\nand the mapping in {{#crossLink \"Config/cssClasses:property\"}}{{/crossLink}}.\n\nThrows error if invalid class name type is requested.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "type",
                    "description": "Class name type, one of the keys in cssClasses",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Config"
        },
        {
            "file": "src\\DefaultAnimator.js",
            "line": 24,
            "description": "Animates the carousel to given item index position.",
            "itemtype": "method",
            "name": "animateToItem",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Index of the item",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "DefaultAnimator"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 41,
            "description": "Component version number.",
            "itemtype": "property",
            "name": "version",
            "type": "string",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 49,
            "description": "Set to true once the component is initiated and to false once it's destroyed.",
            "itemtype": "property",
            "name": "_initiated",
            "type": "{boolean}",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 59,
            "description": "Carousel configuration.",
            "itemtype": "property",
            "name": "_config",
            "type": "Config",
            "default": "Config",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 69,
            "description": "Data source to use.\n\nData source is only set when the carousel is initiated with data or it's set with\n{{#crossLink \"FlowCarousel/setDataSource\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_dataSource",
            "type": "{AbstractDataSource}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 82,
            "description": "Renderer used to render the data.",
            "itemtype": "property",
            "name": "_renderer",
            "type": "{AbstractRenderer}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 92,
            "description": "Animator to use.",
            "itemtype": "property",
            "name": "_animator",
            "type": "{AbstractAnimator}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 102,
            "description": "Selector of elements to turn into a carousel.",
            "itemtype": "property",
            "name": "_selector",
            "type": "{string}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 112,
            "description": "The interval reference for responsive layout changes.",
            "itemtype": "property",
            "name": "_responsiveLayoutListenerInterval",
            "type": "{number}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 122,
            "description": "The top wrap elements jQuery object.",
            "itemtype": "property",
            "name": "_mainWrap",
            "type": "{DOMElement}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 132,
            "description": "Wrap for the items that contains the {{#crossLink \"FlowCarousel/_scrollerWrap:property\"}}{{/crossLink}}\nwhich in turn contains the actual item wrappers and items.",
            "itemtype": "property",
            "name": "_itemsWrap",
            "type": "{DOMElement}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 143,
            "description": "This is the wrap that's animated on navigation and contains the carousel element wraps.",
            "itemtype": "property",
            "name": "_scrollerWrap",
            "type": "{DOMElement}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 153,
            "description": "Is the carousel currently animating.",
            "itemtype": "property",
            "name": "_isAnimating",
            "type": "{boolean}",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 163,
            "description": "Target item position index.\n\nThis is set when animating to an index is requested.",
            "itemtype": "property",
            "name": "_targetItemIndex",
            "type": "{number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 175,
            "description": "Current item position index.\n\nThis is updated once the animation completes.",
            "itemtype": "property",
            "name": "_currentItemIndex",
            "type": "{number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 187,
            "description": "List of item indexes that have been rendered.",
            "itemtype": "property",
            "name": "_renderedItemIndexes",
            "type": "{array}",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 196,
            "description": "Mapping of renderer item indexes to their dom elements.",
            "itemtype": "property",
            "name": "_itemIndexToElementMap",
            "type": "{object}",
            "default": "{}",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 206,
            "description": "Shortcut to the list of possible orientations from Config.",
            "itemtype": "property",
            "name": "Orientation",
            "type": "{object}",
            "class": "FlowCarousel",
            "subprops": [
                {
                    "name": "HORIZONTAL='horizontal'",
                    "description": "Horizontal orientation",
                    "type": "String"
                },
                {
                    "name": "VERTIAL='vertical'",
                    "description": "Vertical orientation",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 217,
            "description": "Possible size modes used by {{#crossLink \"FlowCarousel/_getWrapSize\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "SizeMode",
            "type": "{object}",
            "static": 1,
            "class": "FlowCarousel",
            "subprops": [
                {
                    "name": "INNER='inner'",
                    "description": "Inner size",
                    "type": "String"
                },
                {
                    "name": "OUTER='outer'",
                    "description": "Outer size",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 231,
            "description": "Initializes the carousel component.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of elements to turn into a carousel",
                    "type": "String"
                },
                {
                    "name": "userConfig",
                    "description": "Optional user configuration object overriding defaults in the\n{{#crossLink \"Config\"}}{{/crossLink}}.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 295,
            "description": "Returns current configuration.",
            "itemtype": "method",
            "name": "getConfig",
            "return": {
                "description": "",
                "type": "Config"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 305,
            "description": "Returns current animator instance.",
            "itemtype": "method",
            "name": "getAnimator",
            "return": {
                "description": "",
                "type": "Config"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 315,
            "description": "Returns the main carousel wrap dom element.",
            "itemtype": "method",
            "name": "getMainWrap",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 325,
            "description": "Returns the items wrap containing the scroller wrap.",
            "itemtype": "method",
            "name": "getItemsWrap",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 335,
            "description": "Returns the scroller wrap containing the item wraps.",
            "itemtype": "method",
            "name": "getScrollerWrap",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 345,
            "description": "Returns the orientation of the carousel.",
            "itemtype": "method",
            "name": "getOrientation",
            "return": {
                "description": "",
                "type": "Config/Orientation:property"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 355,
            "description": "Returns the size of a single item given current wrap size.",
            "itemtype": "method",
            "name": "getItemSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 368,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 378,
            "description": "Returns the number of pages the dataset contains given current wrap size.",
            "itemtype": "method",
            "name": "getPageCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 388,
            "description": "Returns the number of items displayed on a single page.",
            "itemtype": "method",
            "name": "getItemsPerPage",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 400,
            "description": "Returns the target item position index.\n\nThis can be different from the return value of getCurrentItemIndex() if the carousel is animating.",
            "itemtype": "method",
            "name": "getTargetItemIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 412,
            "description": "Returns the current item position index.\n\nThis can be different from the return value of getTargetItemIndex() if the carousel is animating.",
            "itemtype": "method",
            "name": "getCurrentItemIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 424,
            "description": "Returns currently visible page number.\n\nAlways returns an integer flooring to the closest round page number.\n\nThe page number starts at zero for first page.",
            "itemtype": "method",
            "name": "getCurrentPageIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 440,
            "description": "Returns the current item position index.\n\nThis can be different from the return value of getTargetItemIndex() if the carousel is animating.",
            "itemtype": "method",
            "name": "getCurrentItemIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 452,
            "description": "Sets the data source to use.\n\nExpects either an instance of AbstractDataSource (you can roll your own) or a simple array that will be\nconverted to an ArrayDataSource.\n\nThis can optionally be set in the init method as second argument.\n\nThis method supports call chaining by returning itself.",
            "itemtype": "method",
            "name": "setDataSource",
            "params": [
                {
                    "name": "Either",
                    "description": "an instance of AbstractDataSource or a simple array",
                    "type": "AbstractDataSource|array"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "",
                "type": "FlowCarousel"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 482,
            "description": "Returns the data used for rendering the component.\n\nReturns null if the component has not yet been initialized.",
            "itemtype": "method",
            "name": "getDataSource",
            "return": {
                "description": "Used data source or null if not available yet",
                "type": "AbstractDataSource|null"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 494,
            "description": "Navigates to a carousel item by index.\n\nThrows error if out of bounds index is requested.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToItem",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Item index to navigate to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 548,
            "description": "Navigates to given page number.\n\nNotice that page numbers start from zero.\n\nThrows error if out of bounds index is requested.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToPage",
            "params": [
                {
                    "name": "pageIndex",
                    "description": "Page index to navigate to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 567,
            "description": "Navigates to next carousel item.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToNextItem",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 584,
            "description": "Navigates to previous carousel item.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToPreviousItem",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 599,
            "description": "Navigates to next page if available.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToNextPage",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 615,
            "description": "Navigates to previous page if available.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToPreviousPage",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 630,
            "description": "Initializes the top-level wrap element.\n\nIf the selector matches multiple elements, only the first one is considered.\n\nIf the selector does not match any elements, an error is thrown.",
            "itemtype": "method",
            "name": "_setupElement",
            "params": [
                {
                    "name": "selector",
                    "description": "Wraps selector",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 660,
            "description": "Initializes a single wrap element.",
            "itemtype": "method",
            "name": "_setupCarousel",
            "params": [
                {
                    "name": "wrap",
                    "description": "The carousel wrap to setup",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 729,
            "description": "Sets up the layout and renders the initial set of items.\n\nSince fetching and rendering items can be asyncronous, this method returns a promise.",
            "itemtype": "method",
            "name": "_setupLayout",
            "params": [
                {
                    "name": "element",
                    "description": "Element to setup items in",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 757,
            "description": "Validates whether all the required items have been rendered and initiates rendering them if not.",
            "itemtype": "method",
            "name": "_validateItemsToRender",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 797,
            "description": "Returns the item dom element by item index.\n\nThrows error if invalid index is requested.",
            "itemtype": "method",
            "name": "_getItemElementByIndex",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Item index to fetch element of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Item dom element or null if not found",
                "type": "DOMElement|null"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 824,
            "description": "Renders a range of carousel items.",
            "itemtype": "method",
            "name": "_renderItemRange",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index",
                    "type": "Number"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 847,
            "description": "Renders given carousel items.",
            "itemtype": "method",
            "name": "_renderItems",
            "params": [
                {
                    "name": "items",
                    "description": "Items to render",
                    "type": "Array"
                },
                {
                    "name": "startIndex",
                    "description": "Range start index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 893,
            "description": "Inserts rendered dom elements into the carousel dom structure.",
            "itemtype": "method",
            "name": "_insertRenderedElements",
            "params": [
                {
                    "name": "elements",
                    "description": "Elements to insert",
                    "type": "DOMElement[]"
                },
                {
                    "name": "startIndex",
                    "description": "First element index in the carousel",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 933,
            "description": "Inserts a rendered dom element into the carousel dom structure.",
            "itemtype": "method",
            "name": "_insertRenderedElement",
            "params": [
                {
                    "name": "element",
                    "description": "Element to insert",
                    "type": "DOMElement"
                },
                {
                    "name": "index",
                    "description": "Element index",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 988,
            "description": "Re-initializes the layout.\n\nUsed to apply responsive layout when the wrap size changes.\n\nSince fetching and rendering items can be asynchronous, this method returns a promise.",
            "itemtype": "method",
            "name": "_reLayout",
            "params": [
                {
                    "name": "element",
                    "description": "Element to layout",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1007,
            "description": "Sets up main wrap size change listener to apply responsive layout.",
            "itemtype": "method",
            "name": "_setupResponsiveLayoutListener",
            "params": [
                {
                    "name": "element",
                    "description": "Element to listen changes of",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1021,
            "description": "Checks whether the carousel wrap size has changed and triggers re-layout if so.",
            "itemtype": "method",
            "name": "_validateResponsiveLayout",
            "params": [
                {
                    "name": "element",
                    "description": "Element to validate",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1045,
            "description": "Calculates and returns a single item size based on wrap size and items per page.",
            "itemtype": "method",
            "name": "_calculateItemSize",
            "params": [
                {
                    "name": "wrapSize",
                    "description": "Wrapping element size",
                    "type": "Number"
                },
                {
                    "name": "itemsPerPage",
                    "description": "Number of items per page",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1057,
            "description": "Returns the size of an element.\n\nHorizontal orientation returns element width and vertical height.\n\nMode sets whether to return the inner or outer width/height (defaults to inner).",
            "itemtype": "method",
            "name": "_getElementSize",
            "params": [
                {
                    "name": "element",
                    "description": "Element to get size of",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to get size of",
                    "type": "Config/Orientation:property"
                },
                {
                    "name": "mode",
                    "description": "Size mode",
                    "type": "FlowCarousel.SizeMode:property",
                    "optional": true,
                    "optdefault": "FlowCarousel.SizeMode.INNER"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1087,
            "description": "Returns biggest element size in given wrap for given orientation and size mode.\n\nHorizontal orientation returns element width and vertical height.\n\nMode sets whether to return the inner or outer width/height (defaults to inner).",
            "itemtype": "method",
            "name": "_getLargestChildSize",
            "params": [
                {
                    "name": "wrap",
                    "description": "Element to get size of",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to get size of",
                    "type": "Config/Orientation:property"
                },
                {
                    "name": "mode",
                    "description": "Size mode",
                    "type": "FlowCarousel.SizeMode:property",
                    "optional": true,
                    "optdefault": "FlowCarousel.SizeMode.INNER"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1115,
            "description": "Returns the extra padding+margin+border size of given element in given orientation.",
            "itemtype": "method",
            "name": "_getExtraSize",
            "params": [
                {
                    "name": "element",
                    "description": "Element to get size of",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to get size of",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1154,
            "description": "Returns the opposite orientation name.\n\nFor Config.Orientation.HORIZONTAL returns Config.Orientation.VERTICAL and vice versa.",
            "itemtype": "method",
            "name": "_getOppositeOrientation",
            "params": [
                {
                    "name": "orientation",
                    "description": "Orientation to get opposite of",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Config/Orientation:property"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\HtmlDataSource.js",
            "line": 24,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "HtmlDataSource"
        },
        {
            "file": "src\\HtmlDataSource.js",
            "line": 34,
            "description": "Fetches given range of items from the dataset.\n\nThis operation can be asynchronous and thus returns a promise that will be resolved once the data becomes\navailable or rejected when an error occurs.\n\nBy default the range is the entire dataset.\n\nThrows error if invalid range is requested.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "length"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "HtmlDataSource"
        },
        {
            "file": "src\\HtmlDataSource.js",
            "line": 70,
            "description": "Extracts the HTML item elements from the given wrap and uses them as data.",
            "itemtype": "method",
            "name": "_setupData",
            "params": [
                {
                    "name": "wrap",
                    "description": "Wrap to get items from",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "HtmlDataSource"
        },
        {
            "file": "src\\HtmlRenderer.js",
            "line": 20,
            "description": "Renders a carousel item.\n\nThe data can be either a object of key-value pairs or an existing dom element to modify.\n\nRendering an item can be asynchronous so a promise is returned.\n\nThe data is an already existing DOMElement for HtmlRenderer.",
            "itemtype": "method",
            "name": "renderItem",
            "params": [
                {
                    "name": "config",
                    "description": "Carousel configuration",
                    "type": "Config"
                },
                {
                    "name": "index",
                    "description": "Item position index",
                    "type": "Number"
                },
                {
                    "name": "element",
                    "description": "Item data object or existing dom element",
                    "type": "Object|DOMElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "HtmlRenderer"
        },
        {
            "file": "src\\Util.js",
            "line": 13,
            "description": "Returns whether given arguments is an object (and not an array nor null).",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "arg",
                    "description": "Arguments to check",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Util"
        },
        {
            "file": "src\\Util.js",
            "line": 25,
            "description": "Returns whether given arguments is an array (and not a object nor null).",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "arg",
                    "description": "Arguments to check",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Util"
        },
        {
            "file": "src\\jquery.js",
            "line": 5,
            "description": "Provides a way to include jquery without actually including it in the build.\n\nExpects that jQuery is already loaded.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nProvides a way to include jquery without actually including it in the build.\n\nExpects that jQuery is already loaded.",
            "line": " src\\jquery.js:5"
        }
    ]
}