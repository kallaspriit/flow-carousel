{
    "project": {
        "name": "FlowCarousel",
        "description": "",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "src\\AbstractAnimator.js": {
            "name": "src\\AbstractAnimator.js",
            "modules": {},
            "classes": {
                "AbstractAnimator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\AbstractDataSource.js": {
            "name": "src\\AbstractDataSource.js",
            "modules": {},
            "classes": {
                "AbstractDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\AbstractRenderer.js": {
            "name": "src\\AbstractRenderer.js",
            "modules": {},
            "classes": {
                "AbstractRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\ArrayDataSource.js": {
            "name": "src\\ArrayDataSource.js",
            "modules": {},
            "classes": {
                "ArrayDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Config.js": {
            "name": "src\\Config.js",
            "modules": {},
            "classes": {
                "Config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\DefaultAnimator.js": {
            "name": "src\\DefaultAnimator.js",
            "modules": {},
            "classes": {
                "DefaultAnimator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Deferred.js": {
            "name": "src\\Deferred.js",
            "modules": {},
            "classes": {
                "Deferred": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\EventEmitter.js": {
            "name": "src\\EventEmitter.js",
            "modules": {},
            "classes": {
                "EventEmitter Manages event registering and emitting.": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\FlowCarousel.js": {
            "name": "src\\FlowCarousel.js",
            "modules": {},
            "classes": {
                "FlowCarousel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\HtmlDataSource.js": {
            "name": "src\\HtmlDataSource.js",
            "modules": {},
            "classes": {
                "HtmlDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\HtmlRenderer.js": {
            "name": "src\\HtmlRenderer.js",
            "modules": {},
            "classes": {
                "HtmlRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Util.js": {
            "name": "src\\Util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jquery.js": {
            "name": "src\\jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AbstractAnimator": {
            "name": "AbstractAnimator",
            "shortname": "AbstractAnimator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AbstractAnimator.js",
            "line": 5,
            "description": "Animator interface.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "carousel",
                    "description": "The carousel component",
                    "type": "FlowCarousel"
                }
            ]
        },
        "AbstractDataSource": {
            "name": "AbstractDataSource",
            "shortname": "AbstractDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AbstractDataSource.js",
            "line": 5,
            "description": "Data source interface.",
            "is_constructor": 1
        },
        "AbstractRenderer": {
            "name": "AbstractRenderer",
            "shortname": "AbstractRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AbstractRenderer.js",
            "line": 6,
            "description": "Renderer interface.",
            "is_constructor": 1
        },
        "ArrayDataSource": {
            "name": "ArrayDataSource",
            "shortname": "ArrayDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\ArrayDataSource.js",
            "line": 7,
            "description": "Data source interface.",
            "extends": "AbstractDataSource",
            "is_constructor": 1
        },
        "Config": {
            "name": "Config",
            "shortname": "Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Config.js",
            "line": 5,
            "description": "Provides configuration.",
            "is_constructor": 1
        },
        "DefaultAnimator": {
            "name": "DefaultAnimator",
            "shortname": "DefaultAnimator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\DefaultAnimator.js",
            "line": 8,
            "description": "Data source interface.",
            "extends": "AbstractAnimator",
            "is_constructor": 1,
            "params": [
                {
                    "name": "carousel",
                    "description": "The carousel component",
                    "type": "FlowCarousel"
                }
            ]
        },
        "Deferred": {
            "name": "Deferred",
            "shortname": "Deferred",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Deferred.js",
            "line": 6,
            "description": "Provides utility functionality.\n\nUses the jQuery deferred implementation.",
            "is_constructor": 1
        },
        "EventEmitter Manages event registering and emitting.": {
            "name": "EventEmitter Manages event registering and emitting.",
            "shortname": "EventEmitter Manages event registering and emitting.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\EventEmitter.js",
            "line": 11,
            "description": "Class for managing events.\nCan be extended to provide event functionality in other classes."
        },
        "FlowCarousel": {
            "name": "FlowCarousel",
            "shortname": "FlowCarousel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\FlowCarousel.js",
            "line": 30,
            "description": "FlowCarousel main class.\n\nResponsive paginated high-performance HTML5 carousel with AngularJS support.\n\nCopyright Stagnation Lab\nReleased under the MIT license\nhttps://github.com/kallaspriit/flow-carousel",
            "extends": "EventEmitter",
            "is_constructor": 1
        },
        "HtmlDataSource": {
            "name": "HtmlDataSource",
            "shortname": "HtmlDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\HtmlDataSource.js",
            "line": 8,
            "description": "Data source interface.",
            "extends": "AbstractDataSource",
            "is_constructor": 1
        },
        "HtmlRenderer": {
            "name": "HtmlRenderer",
            "shortname": "HtmlRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\HtmlRenderer.js",
            "line": 7,
            "description": "The default renderer for already existing HTML elements.",
            "extends": "AbstractRenderer",
            "is_constructor": 1
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Util.js",
            "line": 5,
            "description": "Provides utility functionality.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src\\AbstractAnimator.js",
            "line": 16,
            "description": "Animates the carousel to given item index position.",
            "itemtype": "method",
            "name": "animateToItem",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Index of the item",
                    "type": "Number"
                },
                {
                    "name": "instant",
                    "description": "Should the navigation be instantaneous and not use animation",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "AbstractAnimator"
        },
        {
            "file": "src\\AbstractDataSource.js",
            "line": 13,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "AbstractDataSource"
        },
        {
            "file": "src\\AbstractDataSource.js",
            "line": 23,
            "description": "Returns whether given data source is asynchronous or not.\n\nIf the data source is asynchronous then placeholders are generated by default while the real data is loading.\n\nDefaults to false so make sure to override this in your async data sources.",
            "itemtype": "method",
            "name": "isAsynchronous",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AbstractDataSource"
        },
        {
            "file": "src\\AbstractDataSource.js",
            "line": 37,
            "description": "Fetches given range of items from the dataset.\n\nThis operation can be asynchronous and thus returns a promise that will be resolved once the data becomes\navailable or rejected when an error occurs.\n\nBy default the range is the entire dataset.\n\nThrows error if invalid range is requested.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "length"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "AbstractDataSource"
        },
        {
            "file": "src\\AbstractRenderer.js",
            "line": 14,
            "description": "Renders a carousel item.\n\nThe data can be either a object of key-value pairs or an existing dom element to modify.\n\nRendering an item can be asynchronous so a promise is returned.",
            "itemtype": "method",
            "name": "renderItem",
            "params": [
                {
                    "name": "config",
                    "description": "Carousel configuration",
                    "type": "Config"
                },
                {
                    "name": "index",
                    "description": "Item position index",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "Item data object or existing dom element",
                    "type": "Object|DOMElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "AbstractRenderer"
        },
        {
            "file": "src\\AbstractRenderer.js",
            "line": 33,
            "description": "Renders a loading item placeholder.\n\nBy default returns a simple div with the\n{{#crossLink \"Config/cssClasses/placeholder:property\"}}{{/crossLink}} class.\n\nYou may override this in your custom renderer.",
            "itemtype": "method",
            "name": "renderPlaceholder",
            "params": [
                {
                    "name": "config",
                    "description": "Carousel configuration",
                    "type": "Config"
                },
                {
                    "name": "index",
                    "description": "Item position index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "AbstractRenderer"
        },
        {
            "file": "src\\AbstractRenderer.js",
            "line": 52,
            "description": "Destroys a carousel item.\n\nBy default just removes the element using jQuery, but inheriting classes may choose to do something fancier.",
            "itemtype": "method",
            "name": "destroyItem",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element to destroy",
                    "type": "DOMElement"
                }
            ],
            "class": "AbstractRenderer"
        },
        {
            "file": "src\\ArrayDataSource.js",
            "line": 22,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "ArrayDataSource"
        },
        {
            "file": "src\\ArrayDataSource.js",
            "line": 32,
            "description": "Fetches given range of items from the dataset.\n\nThis operation can be asynchronous and thus returns a promise that will be resolved once the data becomes\navailable or rejected when an error occurs.\n\nBy default the range is the entire dataset.\n\nThrows error if invalid range is requested.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "length"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "ArrayDataSource"
        },
        {
            "file": "src\\Config.js",
            "line": 13,
            "description": "Carousel orientation to use.\n\nOne of {{#crossLink \"Config/Orientation:property\"}}{{/crossLink}}.\n\nDefaults to horizontal.",
            "itemtype": "property",
            "name": "orientation",
            "type": "{Config/Orientation:property}",
            "default": "Config.Orientation.VERTICAL",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 26,
            "description": "The size mode to use, defaults to matching item sizes to wrap size.",
            "itemtype": "property",
            "name": "sizeMode",
            "type": "{Config/SizeMode:property}",
            "default": "Config.SizeMode.MATCH_WRAP",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 35,
            "description": "Item margin to use.",
            "itemtype": "property",
            "name": "margin",
            "type": "{number}",
            "default": "0",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 44,
            "description": "Should responsive layout be used by default.",
            "itemtype": "property",
            "name": "useResponsiveLayout",
            "type": "boolean",
            "default": "true",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 53,
            "description": "Should placeholders be generated while loading actual items.",
            "itemtype": "property",
            "name": "usePlaceholders",
            "type": "boolean",
            "default": "true",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 62,
            "description": "Number of items to render side-by-side when not using responsive layout.\n\nThis parameter is ignored when using responsive layout strategy.",
            "itemtype": "property",
            "name": "itemsPerPage",
            "type": "number",
            "default": "5",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 73,
            "description": "The index of the element to scroll to at startup.\n\nSet to a number value of valid range to enable.\n\nDefault to showing the first element.",
            "itemtype": "property",
            "name": "startIndex",
            "type": "{number}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 86,
            "description": "List of default responsive layout breakpoint.\n\nThe list should be ordered from the smallest size to the largest.",
            "itemtype": "property",
            "name": "responsiveBreakpoints",
            "type": "array",
            "default": "true",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 112,
            "description": "The interval at which to check for carousel wrap size changes so responsive layout could be applied.\n\nValue is in milliseconds.",
            "itemtype": "property",
            "name": "responsiveLayoutListenerInterval",
            "type": "{number}",
            "default": "100",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 123,
            "description": "The css classes prefix to use.",
            "itemtype": "property",
            "name": "cssPrefix",
            "type": "{string}",
            "default": "'flow-carousel-'",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 132,
            "description": "CSS class names to use.\n\nThe class name is combined with the {{#crossLink \"Config/cssPrefix:property\"}}{{/crossLink}} property\nso if the prefix is \"flow-carousel-\" and the wrap class is \"wrap\" then the main wrap will get the\n\"flow-carousel-wrap\" class.",
            "itemtype": "property",
            "name": "cssClasses",
            "type": "{object}",
            "class": "Config",
            "subprops": [
                {
                    "name": "wrap='wrap'",
                    "description": "Assigned to the main wrap element",
                    "type": "String"
                },
                {
                    "name": "items='items'",
                    "description": "Assigned to the items wrap element in the main wrap",
                    "type": "String"
                },
                {
                    "name": "scroller='scroller'",
                    "description": "Assigned to the animated scroller wrap in the items wrap",
                    "type": "String"
                },
                {
                    "name": "item='item'",
                    "description": "Assigned to each item wrapper containing the actual item",
                    "type": "String"
                },
                {
                    "name": "placeholder='placeholder'",
                    "description": "Assigned to each item wrapper that is a placeholder",
                    "type": "String"
                },
                {
                    "name": "matchWrap='match-wrap'",
                    "description": "Assigned to main wrap when using the wrap size match mode",
                    "type": "String"
                },
                {
                    "name": "matchLargestItem='match-largest-item'",
                    "description": "Assigned to main wrap when matching the wrap\n\t\t\t\t   size to the largest item size",
                    "type": "String"
                },
                {
                    "name": "horizontal='horizontal'",
                    "description": "Assigned to main wrap for horizontal orientation",
                    "type": "String"
                },
                {
                    "name": "vertical='vertical'",
                    "description": "Assigned to main wrap for vertical orientation",
                    "type": "String"
                },
                {
                    "name": "instantAnimation='instant-animation'",
                    "description": "Assigned to main wrap if the animation is\n\t\t\t\t   requested to be instantaneous",
                    "type": "String"
                },
                {
                    "name": "initiating='initiating'",
                    "description": "Assigned to main wrap during initialization procedure",
                    "type": "String"
                },
                {
                    "name": "loading='loading'",
                    "description": "Assigned to main wrap during loading of items",
                    "type": "String"
                },
                {
                    "name": "rendering='rendering'",
                    "description": "Assigned to main wrap during rendering of items",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\Config.js",
            "line": 173,
            "description": "The carousel instance is registered as the main wrap data with the dataTarget name.",
            "itemtype": "property",
            "name": "dataTarget",
            "type": "{string}",
            "default": "'flow-carousel'",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 182,
            "description": "Optional custom data source to use.\n\nAs a special case, a simple array can be provided as data source which is converted to use\n{{#crossLink \"ArrayDataSource\"}}{{/crossLink}} implementation.\n\nIf none is provided then the {{#crossLink \"HtmlDataSource\"}}{{/crossLink}} is used.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{AbstractRenderer|array}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 196,
            "description": "Optional custom renderer to use.\n\nIf none is provided then the {{#crossLink \"HtmlRenderer\"}}{{/crossLink}} is used.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{AbstractRenderer}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 207,
            "description": "Optional custom animator to use.\n\nShould be an instance of {{#crossLink \"AbstractAnimator\"}}{{/crossLink}}.\n\nIf none is provided then the {{#crossLink \"DefaultAnimator\"}}{{/crossLink}} is used.",
            "itemtype": "property",
            "name": "animator",
            "type": "{AbstractAnimator}",
            "default": "null",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 220,
            "description": "Returns the range of items that should be rendered given current item index and items per page.\n\nBy default returns one page before the current page and one after but one may choose to override it.",
            "itemtype": "method",
            "name": "getRenderRange",
            "params": [
                {
                    "name": "currentItemIndex",
                    "description": "Currently scrolled position index",
                    "type": "Number"
                },
                {
                    "name": "itemsPerPage",
                    "description": "How many items are shown on a page",
                    "type": "Number"
                },
                {
                    "name": "itemCount",
                    "description": "How many items there are in total",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Render range with start and end keys",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 240,
            "description": "Enumeration of possible carousel orientations.",
            "itemtype": "property",
            "name": "Orientation",
            "type": "{object}",
            "static": 1,
            "class": "Config",
            "subprops": [
                {
                    "name": "HORIZONTAL='horizontal'",
                    "description": "Horizontal orientation",
                    "type": "String"
                },
                {
                    "name": "VERTIAL='vertical'",
                    "description": "Vertical orientation",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\Config.js",
            "line": 254,
            "description": "There are two different strategies for setting the size of the wrap and the items:\n> MATCH_WRAP - the size of the items is set to match the wrap size\n> MATCH_LARGEST_ITEM - the size of the wrap is set to match the largest item",
            "itemtype": "property",
            "name": "SizeMode",
            "type": "{object}",
            "static": 1,
            "class": "Config",
            "subprops": [
                {
                    "name": "Orientation.MATCH_WRAP='match-wrap'",
                    "description": "Items size is based on wrap size",
                    "type": "String"
                },
                {
                    "name": "Orientation.MATCH_LARGEST_ITEM='match-largest-item'",
                    "description": "Wrap size is based on items size",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\Config.js",
            "line": 270,
            "description": "Extends the base default configuration properties with user-defined values.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "userConfig",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 291,
            "description": "Returns the number of items to render side-by-side based on the wrap size and\n{{#crossLink \"Config/responsiveBreakpoints:property\"}}{{/crossLink}} setting.",
            "itemtype": "method",
            "name": "getItemsPerPage",
            "params": [
                {
                    "name": "wrapSize",
                    "description": "Wrap size to base the calculation on",
                    "type": "Number"
                }
            ],
            "class": "Config"
        },
        {
            "file": "src\\Config.js",
            "line": 317,
            "description": "Returns class name to use by type.\n\nThe class name is constructed by combining the value of {{#crossLink \"Config/cssPrefix:property\"}}{{/crossLink}}\nand the mapping in {{#crossLink \"Config/cssClasses:property\"}}{{/crossLink}}.\n\nThrows error if invalid class name type is requested.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "type",
                    "description": "Class name type, one of the keys in cssClasses",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Config"
        },
        {
            "file": "src\\DefaultAnimator.js",
            "line": 24,
            "description": "Animates the carousel to given item index position.",
            "itemtype": "method",
            "name": "animateToItem",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Index of the item",
                    "type": "Number"
                },
                {
                    "name": "instant",
                    "description": "Should the navigation be instantaneous and not use animation",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "DefaultAnimator"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 24,
            "description": "Finds the index of the listener for the event in it's storage array.",
            "params": [
                {
                    "name": "listeners",
                    "description": "Array of listeners to search through.",
                    "type": "Function[]"
                },
                {
                    "name": "listener",
                    "description": "Method to look for.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Index of the specified listener, -1 if not found",
                "type": "Number"
            },
            "api": "private",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 43,
            "description": "Alias a method while keeping the context correct, to allow for overwriting of target method.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the target method.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The aliased method",
                "type": "Function"
            },
            "api": "private",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 56,
            "description": "Returns the listener array for the specified event.\nWill initialise the event object and listener arrays if required.\nWill return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\nEach property in the object response is an array of listener functions.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to return the listeners from.",
                    "type": "String|RegExp"
                }
            ],
            "return": {
                "description": "All listener functions for the event.",
                "type": "Function[]|Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 87,
            "description": "Takes a list of listener objects and flattens it into a list of listener functions.",
            "params": [
                {
                    "name": "listeners",
                    "description": "Raw listener objects.",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "Just the listener functions.",
                "type": "Function[]"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 104,
            "description": "Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to return the listeners from.",
                    "type": "String|RegExp"
                }
            ],
            "return": {
                "description": "All listener functions for an event in an object.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 122,
            "description": "Adds a listener function to the specified event.\nThe listener will not be added if it is a duplicate.\nIf the listener returns true then it will be removed after it is called.\nIf you pass a regular expression as the event name then the listener will be added to all events that match it.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to attach the listener to.",
                    "type": "String|RegExp"
                },
                {
                    "name": "listener",
                    "description": "Method to be called when the event is emitted. If the function returns true then it will be removed after calling.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 149,
            "description": "Alias of addListener",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 154,
            "description": "Semi-alias of addListener. It will add a listener that will be\nautomatically removed after it's first execution.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to attach the listener to.",
                    "type": "String|RegExp"
                },
                {
                    "name": "listener",
                    "description": "Method to be called when the event is emitted. If the function returns true then it will be removed after calling.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 169,
            "description": "Alias of addOnceListener.",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 174,
            "description": "Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\nYou need to tell it what event names should be matched by a regex.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to create.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 186,
            "description": "Uses defineEvent to define multiple events.",
            "params": [
                {
                    "name": "evts",
                    "description": "An array of event names to define.",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 199,
            "description": "Removes a listener function from the specified event.\nWhen passed a regular expression as the event name, it will remove the listener from all events that match it.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to remove the listener from.",
                    "type": "String|RegExp"
                },
                {
                    "name": "listener",
                    "description": "Method to remove from the event.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 225,
            "description": "Alias of removeListener",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 230,
            "description": "Adds listeners in bulk using the manipulateListeners method.\nIf you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\nYou can also pass it a regular expression to add the array of listeners to all events that match it.\nYeah, this function does quite a bit. That's probably a bad thing.",
            "params": [
                {
                    "name": "evt",
                    "description": "An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.",
                    "type": "String|Object|RegExp"
                },
                {
                    "name": "listeners",
                    "description": "An optional array of listener functions to add.",
                    "type": "Function[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 245,
            "description": "Removes listeners in bulk using the manipulateListeners method.\nIf you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\nYou can also pass it an event name and an array of listeners to be removed.\nYou can also pass it a regular expression to remove the listeners from all events that match it.",
            "params": [
                {
                    "name": "evt",
                    "description": "An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.",
                    "type": "String|Object|RegExp"
                },
                {
                    "name": "listeners",
                    "description": "An optional array of listener functions to remove.",
                    "type": "Function[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 260,
            "description": "Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\nThe first argument will determine if the listeners are removed (true) or added (false).\nIf you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\nYou can also pass it an event name and an array of listeners to be added/removed.\nYou can also pass it a regular expression to manipulate the listeners of all events that match it.",
            "params": [
                {
                    "name": "remove",
                    "description": "True if you want to remove listeners, false if you want to add.",
                    "type": "Boolean"
                },
                {
                    "name": "evt",
                    "description": "An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.",
                    "type": "String|Object|RegExp"
                },
                {
                    "name": "listeners",
                    "description": "An optional array of listener functions to add/remove.",
                    "type": "Function[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 306,
            "description": "Removes all listeners from a specified event.\nIf you do not specify an event then all listeners will be removed.\nThat means every event will be emptied.\nYou can also pass a regex to remove all events that match it.",
            "params": [
                {
                    "name": "evt",
                    "description": "Optional name of the event to remove all listeners for. Will remove from every event if not passed.",
                    "type": "String|RegExp",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 341,
            "description": "Alias of removeEvent.\n\nAdded to mirror the node API.",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 348,
            "description": "Emits an event of your choice.\nWhen emitted, every listener attached to that event will be executed.\nIf you pass the optional argument array then those arguments will be passed to every listener upon execution.\nBecause it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\nSo they will not arrive within the array on the other side, they will be separate.\nYou can also pass a regular expression to emit to all events that match it.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to emit and execute listeners for.",
                    "type": "String|RegExp"
                },
                {
                    "name": "args",
                    "description": "Optional array of arguments to be passed to each listener.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 392,
            "description": "Alias of emitEvent",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 397,
            "description": "Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\nAs with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.",
            "params": [
                {
                    "name": "evt",
                    "description": "Name of the event to emit and execute listeners for.",
                    "type": "String|RegExp"
                },
                {
                    "name": "Optional",
                    "description": "additional arguments to be passed to each listener.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 410,
            "description": "Sets the current value to check against when executing listeners. If a\nlisteners return value matches the one set here then it will be removed\nafter execution. This value defaults to true.",
            "params": [
                {
                    "name": "value",
                    "description": "The new value to check for when executing listeners.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Current instance of EventEmitter for chaining.",
                "type": "Object"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 423,
            "description": "Fetches the current value to check against when executing listeners. If\nthe listeners return value matches this one then it should be removed\nautomatically. It will return true by default.",
            "return": {
                "description": "The current value to check for or the default, true.",
                "type": "*|Boolean"
            },
            "api": "private",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 440,
            "description": "Fetches the events object and creates one if required.",
            "return": {
                "description": "The events storage object.",
                "type": "Object"
            },
            "api": "private",
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 450,
            "description": "Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.",
            "return": {
                "description": "Non conflicting EventEmitter class.",
                "type": "Function"
            },
            "class": "EventEmitter Manages event registering and emitting."
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 44,
            "description": "Component version number.",
            "itemtype": "property",
            "name": "version",
            "type": "string",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 52,
            "description": "Set to true once the component is initiated and to false once it's destroyed.",
            "itemtype": "property",
            "name": "_initiated",
            "type": "{boolean}",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 62,
            "description": "Carousel configuration.",
            "itemtype": "property",
            "name": "_config",
            "type": "Config",
            "default": "Config",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 72,
            "description": "Data source to use.\n\nData source is only set when the carousel is initiated with data or it's set with\n{{#crossLink \"FlowCarousel/setDataSource\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_dataSource",
            "type": "{AbstractDataSource}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 85,
            "description": "Renderer used to render the data.",
            "itemtype": "property",
            "name": "_renderer",
            "type": "{AbstractRenderer}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 95,
            "description": "Animator to use.",
            "itemtype": "property",
            "name": "_animator",
            "type": "{AbstractAnimator}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 105,
            "description": "Selector of elements to turn into a carousel.",
            "itemtype": "property",
            "name": "_selector",
            "type": "{string}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 115,
            "description": "The interval reference for responsive layout changes.",
            "itemtype": "property",
            "name": "_responsiveLayoutListenerInterval",
            "type": "{number}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 125,
            "description": "The top wrap elements jQuery object.",
            "itemtype": "property",
            "name": "_mainWrap",
            "type": "{DOMElement}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 135,
            "description": "Wrap for the items that contains the {{#crossLink \"FlowCarousel/_scrollerWrap:property\"}}{{/crossLink}}\nwhich in turn contains the actual item wrappers and items.",
            "itemtype": "property",
            "name": "_itemsWrap",
            "type": "{DOMElement}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 146,
            "description": "This is the wrap that's animated on navigation and contains the carousel element wraps.",
            "itemtype": "property",
            "name": "_scrollerWrap",
            "type": "{DOMElement}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 156,
            "description": "Is the carousel currently animating.",
            "itemtype": "property",
            "name": "_isAnimating",
            "type": "{boolean}",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 166,
            "description": "Target item position index.\n\nThis is set when animating to an index is requested.",
            "itemtype": "property",
            "name": "_targetItemIndex",
            "type": "{number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 178,
            "description": "Current item position index.\n\nThis is updated once the animation completes.",
            "itemtype": "property",
            "name": "_currentItemIndex",
            "type": "{number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 190,
            "description": "List of item indexes that have been rendered.",
            "itemtype": "property",
            "name": "_renderedItemIndexes",
            "type": "{array}",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 199,
            "description": "List of placeholder indexes that have been rendered.\n\nTODO consider getting rid of this index list",
            "itemtype": "property",
            "name": "_renderedPlaceholderIndexes",
            "type": "{array}",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 210,
            "description": "Mapping of renderer item indexes to their dom elements.",
            "itemtype": "property",
            "name": "_itemIndexToElementMap",
            "type": "{object}",
            "default": "{}",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 220,
            "description": "Enumeration of possible carousel orientations.\n\nShortcut to the list of possible orientations from Config.",
            "itemtype": "property",
            "name": "Orientation",
            "type": "{object}",
            "class": "FlowCarousel",
            "subprops": [
                {
                    "name": "HORIZONTAL='horizontal'",
                    "description": "Horizontal orientation",
                    "type": "String"
                },
                {
                    "name": "VERTIAL='vertical'",
                    "description": "Vertical orientation",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 232,
            "description": "There are two different strategies for setting the size of the wrap and the items:\n> MATCH_WRAP - the size of the items is set to match the wrap size\n> MATCH_LARGEST_ITEM - the size of the wrap is set to match the largest item\n\nShortcut to the list of possible size modes from Config.",
            "itemtype": "property",
            "name": "SizeMode",
            "type": "{object}",
            "static": 1,
            "class": "FlowCarousel",
            "subprops": [
                {
                    "name": "Orientation.MATCH_WRAP='match-wrap'",
                    "description": "Items size is based on wrap size",
                    "type": "String"
                },
                {
                    "name": "Orientation.MATCH_LARGEST_ITEM='match-largest-item'",
                    "description": "Wrap size is based on items size",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 250,
            "description": "Possible size modes used by {{#crossLink \"FlowCarousel/_getWrapSize\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "SizeMode",
            "type": "{object}",
            "static": 1,
            "class": "FlowCarousel",
            "subprops": [
                {
                    "name": "INNER='inner'",
                    "description": "Inner size",
                    "type": "String"
                },
                {
                    "name": "OUTER='outer'",
                    "description": "Outer size",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 264,
            "description": "Initializes the carousel component.\n\nReturns a promise that will be resolved once the carousel has been initiated.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of elements to turn into a carousel",
                    "type": "String"
                },
                {
                    "name": "userConfig",
                    "description": "Optional user configuration object overriding defaults in the\n{{#crossLink \"Config\"}}{{/crossLink}}.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 331,
            "description": "Returns current configuration.",
            "itemtype": "method",
            "name": "getConfig",
            "return": {
                "description": "",
                "type": "Config"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 341,
            "description": "Returns current animator instance.",
            "itemtype": "method",
            "name": "getAnimator",
            "return": {
                "description": "",
                "type": "Config"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 351,
            "description": "Returns the main carousel wrap dom element.",
            "itemtype": "method",
            "name": "getMainWrap",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 361,
            "description": "Returns the items wrap containing the scroller wrap.",
            "itemtype": "method",
            "name": "getItemsWrap",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 371,
            "description": "Returns the scroller wrap containing the item wraps.",
            "itemtype": "method",
            "name": "getScrollerWrap",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 381,
            "description": "Returns the orientation of the carousel.",
            "itemtype": "method",
            "name": "getOrientation",
            "return": {
                "description": "",
                "type": "Config/Orientation:property"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 391,
            "description": "Returns the size of a single item given current wrap size.",
            "itemtype": "method",
            "name": "getItemSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 404,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 414,
            "description": "Returns the number of pages the dataset contains given current wrap size.",
            "itemtype": "method",
            "name": "getPageCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 424,
            "description": "Returns the number of items displayed on a single page.",
            "itemtype": "method",
            "name": "getItemsPerPage",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 436,
            "description": "Returns the target item position index.\n\nThis can be different from the return value of getCurrentItemIndex() if the carousel is animating.",
            "itemtype": "method",
            "name": "getTargetItemIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 448,
            "description": "Returns the current item position index.\n\nThis can be different from the return value of getTargetItemIndex() if the carousel is animating.",
            "itemtype": "method",
            "name": "getCurrentItemIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 460,
            "description": "Returns currently visible page number.\n\nAlways returns an integer flooring to the closest round page number.\n\nThe page number starts at zero for first page.",
            "itemtype": "method",
            "name": "getCurrentPageIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 476,
            "description": "Returns the range of items that should be rendered for current item index and config.",
            "itemtype": "method",
            "name": "getRenderRange",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Optional item index to use, defaults to current",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "this._currentItemIndex"
                }
            ],
            "return": {
                "description": "Render range with start and end keys",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 493,
            "description": "Returns the current item position index.\n\nThis can be different from the return value of getTargetItemIndex() if the carousel is animating.",
            "itemtype": "method",
            "name": "getCurrentItemIndex",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 505,
            "description": "Sets the data source to use.\n\nExpects either an instance of AbstractDataSource (you can roll your own) or a simple array that will be\nconverted to an ArrayDataSource.\n\nThis can optionally be set in the init method as second argument.\n\nThis method supports call chaining by returning itself.",
            "itemtype": "method",
            "name": "setDataSource",
            "params": [
                {
                    "name": "Either",
                    "description": "an instance of AbstractDataSource or a simple array",
                    "type": "AbstractDataSource|array"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "",
                "type": "FlowCarousel"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 535,
            "description": "Returns the data used for rendering the component.\n\nReturns null if the component has not yet been initialized.",
            "itemtype": "method",
            "name": "getDataSource",
            "return": {
                "description": "Used data source or null if not available yet",
                "type": "AbstractDataSource|null"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 547,
            "description": "Navigates to a carousel item by index.\n\nThrows error if out of bounds index is requested.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToItem",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Item index to navigate to",
                    "type": "Number"
                },
                {
                    "name": "instant",
                    "description": "Should the navigation be instantaneous and not use animation",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 613,
            "description": "Navigates to given page number.\n\nNotice that page numbers start from zero.\n\nThrows error if out of bounds index is requested.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToPage",
            "params": [
                {
                    "name": "pageIndex",
                    "description": "Page index to navigate to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 632,
            "description": "Navigates to next carousel item.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToNextItem",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 649,
            "description": "Navigates to previous carousel item.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToPreviousItem",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 664,
            "description": "Navigates to next page if available.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToNextPage",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 680,
            "description": "Navigates to previous page if available.\n\nReturns deferred promise that will be resolved once the animation completes.",
            "itemtype": "method",
            "name": "navigateToPreviousPage",
            "return": {
                "description": "Deferred promise that will be resolved once the animation completes",
                "type": "Deferred.Promise"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 695,
            "description": "Returns the range of currently visible carousel item wrappers.",
            "itemtype": "method",
            "name": "getCurrentPageVisibleRange",
            "return": {
                "description": "return.end Visible range end index",
                "type": "Number"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 713,
            "description": "Returns the list of currently visible carousel item wrappers.",
            "itemtype": "method",
            "name": "getCurrentPageVisibleItemElements",
            "return": {
                "description": "",
                "type": "DOMElement[]"
            },
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 739,
            "description": "Returns the item dom element by item index.\n\nThrows error if invalid index is requested.",
            "itemtype": "method",
            "name": "getItemElementByIndex",
            "params": [
                {
                    "name": "itemIndex",
                    "description": "Item index to fetch element of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Item dom element or null if not found",
                "type": "DOMElement|null"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 766,
            "description": "Initializes the top-level wrap element.\n\nIf the selector matches multiple elements, only the first one is considered.\n\nIf the selector does not match any elements, an error is thrown.",
            "itemtype": "method",
            "name": "_setupElement",
            "params": [
                {
                    "name": "selector",
                    "description": "Wraps selector",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 796,
            "description": "Initializes a single wrap element.",
            "itemtype": "method",
            "name": "_setupCarousel",
            "params": [
                {
                    "name": "wrap",
                    "description": "The carousel wrap to setup",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 884,
            "description": "Sets up the layout and renders the initial set of items.\n\nSince fetching and rendering items can be asyncronous, this method returns a promise.",
            "itemtype": "method",
            "name": "_setupLayout",
            "params": [
                {
                    "name": "element",
                    "description": "Element to setup items in",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 917,
            "description": "Validates whether all the required items have been rendered and initiates rendering them if not.",
            "itemtype": "method",
            "name": "_validateItemsToRender",
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 930,
            "description": "Removes items that have gone out of the render range.",
            "itemtype": "method",
            "name": "_removeInvalidItems",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 991,
            "description": "Renders a range of carousel items.",
            "itemtype": "method",
            "name": "_renderItemRange",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index",
                    "type": "Number"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1024,
            "description": "Renders the item placeholders for current target index.",
            "itemtype": "method",
            "name": "_renderTargetIndexPlaceholders",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1039,
            "description": "Renders the item placeholders that will later be replaced with the actual items.\n\nGives the user some \"loading\" feedback.",
            "itemtype": "method",
            "name": "_renderItemPlaceholders",
            "params": [
                {
                    "name": "startIndex",
                    "description": "The starting index",
                    "type": "Number"
                },
                {
                    "name": "endIndex",
                    "description": "The end item index",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1069,
            "description": "Renders given carousel items.",
            "itemtype": "method",
            "name": "_renderItems",
            "params": [
                {
                    "name": "items",
                    "description": "Items to render",
                    "type": "Array"
                },
                {
                    "name": "startIndex",
                    "description": "Range start index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1148,
            "description": "Inserts rendered dom elements into the carousel dom structure.",
            "itemtype": "method",
            "name": "_insertRenderedElements",
            "params": [
                {
                    "name": "elements",
                    "description": "Elements to insert",
                    "type": "DOMElement[]"
                },
                {
                    "name": "startIndex",
                    "description": "First element index in the carousel",
                    "type": "Number"
                },
                {
                    "name": "arePlaceholders",
                    "description": "Are the elements placeholders",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1208,
            "description": "Inserts a rendered dom element into the carousel dom structure.",
            "itemtype": "method",
            "name": "_insertRenderedElement",
            "params": [
                {
                    "name": "element",
                    "description": "Element to insert",
                    "type": "DOMElement"
                },
                {
                    "name": "index",
                    "description": "Element index",
                    "type": "Number"
                },
                {
                    "name": "isPlaceholder",
                    "description": "Is the element a placeholder",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1285,
            "description": "Sets the scroller wrap size to the largest visible child size.",
            "itemtype": "method",
            "name": "_setScrollerSizeToLargestVisibleChildSize",
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1316,
            "description": "Re-initializes the layout.\n\nUsed to apply responsive layout when the wrap size changes.\n\nSince fetching and rendering items can be asynchronous, this method returns a promise.",
            "itemtype": "method",
            "name": "_reLayout",
            "params": [
                {
                    "name": "element",
                    "description": "Element to layout",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1336,
            "description": "Sets up main wrap size change listener to apply responsive layout.",
            "itemtype": "method",
            "name": "_setupResponsiveLayoutListener",
            "params": [
                {
                    "name": "element",
                    "description": "Element to listen changes of",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1350,
            "description": "Checks whether the carousel wrap size has changed and triggers re-layout if so.",
            "itemtype": "method",
            "name": "_validateResponsiveLayout",
            "params": [
                {
                    "name": "element",
                    "description": "Element to validate",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to use",
                    "type": "Config/Orientation:property"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1374,
            "description": "Calculates and returns a single item size based on wrap size and items per page.",
            "itemtype": "method",
            "name": "_calculateItemSize",
            "params": [
                {
                    "name": "wrapSize",
                    "description": "Wrapping element size",
                    "type": "Number"
                },
                {
                    "name": "itemsPerPage",
                    "description": "Number of items per page",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1386,
            "description": "Returns the size of an element.\n\nHorizontal orientation returns element width and vertical height.\n\nMode sets whether to return the inner or outer width/height (defaults to inner).",
            "itemtype": "method",
            "name": "_getElementSize",
            "params": [
                {
                    "name": "element",
                    "description": "Element to get size of",
                    "type": "DOMelement"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to get size of",
                    "type": "Config/Orientation:property"
                },
                {
                    "name": "mode",
                    "description": "Size mode",
                    "type": "FlowCarousel.SizeMode:property",
                    "optional": true,
                    "optdefault": "FlowCarousel.SizeMode.INNER"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1416,
            "description": "Returns biggest element size of given elements given orientation and size mode.\n\nHorizontal orientation returns element width and vertical height.\n\nMode sets whether to return the inner or outer width/height (defaults to inner).",
            "itemtype": "method",
            "name": "_getLargestElementSize",
            "params": [
                {
                    "name": "elements",
                    "description": "Array of elements",
                    "type": "DOMElement[]"
                },
                {
                    "name": "orientation",
                    "description": "Orientation to get size of",
                    "type": "Config/Orientation:property"
                },
                {
                    "name": "mode",
                    "description": "Size mode",
                    "type": "FlowCarousel.SizeMode:property",
                    "optional": true,
                    "optdefault": "FlowCarousel.SizeMode.INNER"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\FlowCarousel.js",
            "line": 1444,
            "description": "Returns the opposite orientation name.\n\nFor Config.Orientation.HORIZONTAL returns Config.Orientation.VERTICAL and vice versa.",
            "itemtype": "method",
            "name": "_getOppositeOrientation",
            "params": [
                {
                    "name": "orientation",
                    "description": "Orientation to get opposite of",
                    "type": "Config/Orientation:property"
                }
            ],
            "return": {
                "description": "",
                "type": "Config/Orientation:property"
            },
            "access": "private",
            "tagname": "",
            "class": "FlowCarousel"
        },
        {
            "file": "src\\HtmlDataSource.js",
            "line": 24,
            "description": "Returns the number of items in the dataset.",
            "itemtype": "method",
            "name": "getItemCount",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "HtmlDataSource"
        },
        {
            "file": "src\\HtmlDataSource.js",
            "line": 34,
            "description": "Fetches given range of items from the dataset.\n\nThis operation can be asynchronous and thus returns a promise that will be resolved once the data becomes\navailable or rejected when an error occurs.\n\nBy default the range is the entire dataset.\n\nThrows error if invalid range is requested.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "startIndex",
                    "description": "Range start index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "endIndex",
                    "description": "Range end index to fetch",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "length"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "HtmlDataSource"
        },
        {
            "file": "src\\HtmlDataSource.js",
            "line": 70,
            "description": "Extracts the HTML item elements from the given wrap and uses them as data.",
            "itemtype": "method",
            "name": "_setupData",
            "params": [
                {
                    "name": "wrap",
                    "description": "Wrap to get items from",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "HtmlDataSource"
        },
        {
            "file": "src\\HtmlRenderer.js",
            "line": 20,
            "description": "Renders a carousel item.\n\nThe data can be either a object of key-value pairs or an existing dom element to modify.\n\nRendering an item can be asynchronous so a promise is returned.\n\nThe data is an already existing DOMElement for HtmlRenderer.",
            "itemtype": "method",
            "name": "renderItem",
            "params": [
                {
                    "name": "config",
                    "description": "Carousel configuration",
                    "type": "Config"
                },
                {
                    "name": "index",
                    "description": "Item position index",
                    "type": "Number"
                },
                {
                    "name": "element",
                    "description": "Item data object or existing dom element",
                    "type": "Object|DOMElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Deferred.Promise"
            },
            "class": "HtmlRenderer"
        },
        {
            "file": "src\\Util.js",
            "line": 13,
            "description": "Returns whether given arguments is an object (and not an array nor null).",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "arg",
                    "description": "Arguments to check",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Util"
        },
        {
            "file": "src\\Util.js",
            "line": 25,
            "description": "Returns whether given arguments is an array (and not a object nor null).",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "arg",
                    "description": "Arguments to check",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Util"
        },
        {
            "file": "src\\jquery.js",
            "line": 5,
            "description": "Provides a way to include jquery without actually including it in the build.\n\nExpects that jQuery is already loaded.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: api",
            "line": " src\\EventEmitter.js:24"
        },
        {
            "message": "unknown tag: api",
            "line": " src\\EventEmitter.js:43"
        },
        {
            "message": "unknown tag: api",
            "line": " src\\EventEmitter.js:423"
        },
        {
            "message": "unknown tag: api",
            "line": " src\\EventEmitter.js:440"
        },
        {
            "message": "Missing item type\nFinds the index of the listener for the event in it's storage array.",
            "line": " src\\EventEmitter.js:24"
        },
        {
            "message": "Missing item type\nAlias a method while keeping the context correct, to allow for overwriting of target method.",
            "line": " src\\EventEmitter.js:43"
        },
        {
            "message": "Missing item type\nReturns the listener array for the specified event.\nWill initialise the event object and listener arrays if required.\nWill return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\nEach property in the object response is an array of listener functions.",
            "line": " src\\EventEmitter.js:56"
        },
        {
            "message": "Missing item type\nTakes a list of listener objects and flattens it into a list of listener functions.",
            "line": " src\\EventEmitter.js:87"
        },
        {
            "message": "Missing item type\nFetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.",
            "line": " src\\EventEmitter.js:104"
        },
        {
            "message": "Missing item type\nAdds a listener function to the specified event.\nThe listener will not be added if it is a duplicate.\nIf the listener returns true then it will be removed after it is called.\nIf you pass a regular expression as the event name then the listener will be added to all events that match it.",
            "line": " src\\EventEmitter.js:122"
        },
        {
            "message": "Missing item type\nAlias of addListener",
            "line": " src\\EventEmitter.js:149"
        },
        {
            "message": "Missing item type\nSemi-alias of addListener. It will add a listener that will be\nautomatically removed after it's first execution.",
            "line": " src\\EventEmitter.js:154"
        },
        {
            "message": "Missing item type\nAlias of addOnceListener.",
            "line": " src\\EventEmitter.js:169"
        },
        {
            "message": "Missing item type\nDefines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\nYou need to tell it what event names should be matched by a regex.",
            "line": " src\\EventEmitter.js:174"
        },
        {
            "message": "Missing item type\nUses defineEvent to define multiple events.",
            "line": " src\\EventEmitter.js:186"
        },
        {
            "message": "Missing item type\nRemoves a listener function from the specified event.\nWhen passed a regular expression as the event name, it will remove the listener from all events that match it.",
            "line": " src\\EventEmitter.js:199"
        },
        {
            "message": "Missing item type\nAlias of removeListener",
            "line": " src\\EventEmitter.js:225"
        },
        {
            "message": "Missing item type\nAdds listeners in bulk using the manipulateListeners method.\nIf you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\nYou can also pass it a regular expression to add the array of listeners to all events that match it.\nYeah, this function does quite a bit. That's probably a bad thing.",
            "line": " src\\EventEmitter.js:230"
        },
        {
            "message": "Missing item type\nRemoves listeners in bulk using the manipulateListeners method.\nIf you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\nYou can also pass it an event name and an array of listeners to be removed.\nYou can also pass it a regular expression to remove the listeners from all events that match it.",
            "line": " src\\EventEmitter.js:245"
        },
        {
            "message": "Missing item type\nEdits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\nThe first argument will determine if the listeners are removed (true) or added (false).\nIf you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\nYou can also pass it an event name and an array of listeners to be added/removed.\nYou can also pass it a regular expression to manipulate the listeners of all events that match it.",
            "line": " src\\EventEmitter.js:260"
        },
        {
            "message": "Missing item type\nRemoves all listeners from a specified event.\nIf you do not specify an event then all listeners will be removed.\nThat means every event will be emptied.\nYou can also pass a regex to remove all events that match it.",
            "line": " src\\EventEmitter.js:306"
        },
        {
            "message": "Missing item type\nAlias of removeEvent.\n\nAdded to mirror the node API.",
            "line": " src\\EventEmitter.js:341"
        },
        {
            "message": "Missing item type\nEmits an event of your choice.\nWhen emitted, every listener attached to that event will be executed.\nIf you pass the optional argument array then those arguments will be passed to every listener upon execution.\nBecause it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\nSo they will not arrive within the array on the other side, they will be separate.\nYou can also pass a regular expression to emit to all events that match it.",
            "line": " src\\EventEmitter.js:348"
        },
        {
            "message": "Missing item type\nAlias of emitEvent",
            "line": " src\\EventEmitter.js:392"
        },
        {
            "message": "Missing item type\nSubtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\nAs with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.",
            "line": " src\\EventEmitter.js:397"
        },
        {
            "message": "Missing item type\nSets the current value to check against when executing listeners. If a\nlisteners return value matches the one set here then it will be removed\nafter execution. This value defaults to true.",
            "line": " src\\EventEmitter.js:410"
        },
        {
            "message": "Missing item type\nFetches the current value to check against when executing listeners. If\nthe listeners return value matches this one then it should be removed\nautomatically. It will return true by default.",
            "line": " src\\EventEmitter.js:423"
        },
        {
            "message": "Missing item type\nFetches the events object and creates one if required.",
            "line": " src\\EventEmitter.js:440"
        },
        {
            "message": "Missing item type\nReverts the global {@link EventEmitter} to its previous value and returns a reference to this version.",
            "line": " src\\EventEmitter.js:450"
        },
        {
            "message": "Missing item type\nProvides a way to include jquery without actually including it in the build.\n\nExpects that jQuery is already loaded.",
            "line": " src\\jquery.js:5"
        }
    ]
}